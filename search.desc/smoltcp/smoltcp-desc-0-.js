searchState.loadedDescShard("smoltcp", 0, "The <em>smoltcp</em> library is built in a layered structure, with …\nNetwork interface logic.\nAccess to networking hardware.\nCommunication between endpoints.\nSpecialized containers.\nTime structures.\nLow-level packet access and construction.\nConfiguration structure used for creating a network …\nThe device independent part of an Ethernet network …\nA  network interface.\nSocket state is guaranteed to not have changed.\nNo packet was processed. You don’t need to call …\nA packet was processed.\nResult returned by <code>Interface::poll_ingress_single</code>.\nResult returned by <code>Interface::poll</code>.\nA prefix of addresses that should be routed via a router\nA routing table.\nA handle, identifying a socket in an Interface.\nAn extensible set of sockets.\nYou should check the state of sockets again for received …\nA packet was processed, which might have caused socket …\nOpaque struct with space for storing one socket.\nAdd a socket to the set, and return its handle.\nAdd a default ipv4 gateway (ie. “ip route add 0.0.0.0/0 …\nAdd a default ipv6 gateway (ie. “ip -6 route add ::/0 …\nGet whether AnyIP is enabled.\nGet the socket context.\n<code>None</code> means “forever”.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a socket from the set by its handle, as mutable.\nGet a mutable socket from the set by its handle, as …\nGet an address from the interface that could be used as …\nGet an address from the interface that could be used as …\nGet an address from the interface that could be used as …\nGet the HardwareAddress address of the interface.\nSet the Hardware address the interface will use.\nCheck whether the interface has the given IP address …\nDetermine if the given <code>Ipv6Address</code> is the solicited node …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the IP addresses of the interface.\nGet the first IPv4 address if present.\nGet the first IPv4 address of the interface.\nGet the first IPv6 address if present.\nGet the first IPv6 address if present.\nGet an iterator to the inner sockets.\nGet a mutable iterator to the inner sockets.\nCreate a network interface using the previously provided …\nCreates a new empty routing table.\nCreate a socket set using the provided storage.\nReturns a route to 0.0.0.0/0 via the <code>gateway</code>, with no …\nReturns a route to ::/0 via the <code>gateway</code>, with no expiry.\nTransmit packets queued in the sockets, and receive …\nReturn a <em>soft deadline</em> for calling poll the next time. The …\nReturn an <em>advisory wait time</em> for calling poll the next …\nTransmit packets queued in the sockets.\nProcess one incoming packet queued in the device.\n<code>None</code> means “forever”.\nRandom seed.\nGet the packet reassembly timeout.\nRemove a socket from the set, without changing its state.\nRemove the default ipv4 gateway\nRemove the default ipv6 gateway\nEnable or disable the AnyIP capability.\nSet the HardwareAddress address of the interface.\nSet the packet reassembly timeout.\nUpdate the routes of this node.\nUpdate the IP addresses of the interface.\nCapture both received and transmitted packets.\nVerify checksum when receiving and compute checksum when …\nA description of checksum behavior for a particular …\nA description of checksum behavior for every supported …\nAn interface for sending and receiving raw network frames.\nA description of device capabilities.\nEthernet frames\nEthernet medium. Devices of this type send and receive …\nA fault injector device.\nA fuzz injector device.\nRepresents a fuzzer. It is expected to replace bytes in …\nIEEE 802.15.4 packets without FCS.\nIPv4 or IPv6 packets (depending on the version field)\nA loopback device.\nType of medium of a device.\nIgnore checksum completely.\nMetadata associated to a packet.\nCaptured packet header type.\nPacket capture mode.\nA packet capture sink.\nA packet capture writer device.\nVerify checksum when receiving.\nCapture only received packets.\nA token to receive a single network packet.\nA tracer device.\nCompute checksum before sending.\nCapture only transmitted packets.\nA token to transmit a single network packet.\nReturn the interval for packet rate limiting, in …\nGet a description of device capabilities.\nChecksum behavior.\nConsumes the token to receive a single network packet.\nConsumes the token to send a single network packet.\nReturn the probability of corrupting a packet, in percents.\nReturn the probability of dropping a packet, in percents.\nFlush data written into the sync.\nFlush data written into the sync.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nModify a single packet with fuzzed data.\nGet a mutable reference to the underlying device.\nGet a mutable reference to the underlying device.\nGet a reference to the underlying device.\nGet a reference to the underlying device.\nWrite the libpcap global header into the sink.\nWrite the libpcap global header into the sink.\nChecksum behavior that results in not computing or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the underlying device, consuming the tracer.\nReturn the underlying device, consuming the fault injector.\nReturn the underlying device, consuming the fuzz injector.\nMaximum burst size, in terms of MTU.\nReturn the maximum packet size, in octets.\nReturn the maximum packet reception rate, in packets per …\nMaximum transmission unit.\nReturn the maximum packet transmission rate, in packets …\nMedium of the device.\nThe Packet ID associated with the frame received by this …\nCreate a tracer device.\nCreate a fault injector device, using the given random …\nCreate a fuzz injector device.\nCreates a loopback device.\nCreates a packet capture writer.\nWrite the libpcap packet header followed by packet data …\nWrite the libpcap packet header followed by packet data …\nWrite the libpcap packet header into the sink.\nWrite the libpcap packet header into the sink.\nConstruct a token pair consisting of one receive token and …\nReturns whether checksum should be verified when receiving.\nSet the interval for packet rate limiting, in milliseconds.\nSet the probability of corrupting a packet, in percents.\nSet the probability of dropping a packet, in percents.\nSet the maximum packet size, in octets.\nSet the maximum packet reception rate, in packets per …\nSet the maximum packet transmission rate, in packets per …\nThe Packet ID to be associated with the frame to be …\nConstruct a transmit token.\nReturns whether checksum should be verified when sending.\nWrite data into the sink.\nWrite an <code>u16</code> into the sink, in native byte order.\nWrite an <code>u16</code> into the sink, in native byte order.\nWrite an <code>u32</code> into the sink, in native byte order.\nWrite an <code>u32</code> into the sink, in native byte order.\nA conversion trait for network sockets.\nA network socket.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIPv4 configuration data provided by the DHCP server.\nConfiguration has been newly acquired, or modified.\nConfiguration has been lost (for example, the lease has …\nReturn value for the <code>Dhcpv4Socket::poll</code> function\nTimeout and retry configuration.\nInformation on how to reach a DHCP server.\nIP address\nIP address to use as destination in outgoing packets\nDNS servers\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current retry/timeouts configuration\nServer identifier to use in outgoing packets. Usually …\nGet whether to ignore NAKs.\nThe REQUEST timeout doubles every 2 tries.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the configured max lease duration.\nAn upper bound on how long to wait between retrying a …\nCreate a DHCPv4 socket\nReceived DHCP packet\nQuery the socket for configuration changes.\nRegister a waker.\nReset state and restart discovery phase.\nRouter address, also known as default gateway. Does not …\nInformation on how to reach the DHCP server that responded …\nSet whether to ignore NAKs.\nSet the max lease duration.\nSet the outgoing options.\nSet the parameter request list.\nSet the server/client port\nSet the buffer into which incoming DHCP packets are copied …\nSet the retry/timeouts configuration.\nA congestion control algorithm.\nError returned by <code>Socket::connect</code>\nError returned by <code>Socket::listen</code>\nError returned by <code>Socket::recv</code>\nError returned by <code>Socket::send</code>\nA Transmission Control Protocol socket.\nA TCP socket ring buffer.\nThe state of a TCP socket, according to RFC 793.\nAborts the connection, if any.\nReturn the ACK delay duration.\nCheck whether the receive half of the full-duplex …\nCheck whether the transmit half of the full-duplex …\nClose the transmit half of the full-duplex connection.\nReturn the current congestion control algorithm.\nConnect to a given endpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the time-to-live (IPv4) or hop limit (IPv6) value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether a connection is active.\nReturn whether the socket is passively listening for …\nReturn whether the socket is open.\nReturn the keep-alive interval.\nStart listening on the given endpoint.\nReturn the listen endpoint\nReturn the local endpoint, or None if not connected.\nReturn whether the receive half of the full-duplex …\nReturn whether the transmit half of the full-duplex …\nReturn whether Nagle’s Algorithm is enabled.\nCreate a socket using the given buffers.\nPeek at a sequence of received octets without removing …\nPeek at a sequence of received octets without removing …\nCall <code>f</code> with the largest contiguous slice of octets in the …\nReturn the maximum number of bytes inside the recv buffer.\nReturn the amount of octets queued in the receive buffer. …\nDequeue a sequence of received octets, and fill a slice …\nRegister a waker for receive operations.\nRegister a waker for send operations.\nReturn the remote endpoint, or None if not connected.\nCall <code>f</code> with the largest contiguous slice of octets in the …\nReturn the maximum number of bytes inside the transmit …\nReturn the amount of octets queued in the transmit buffer.\nEnqueue a sequence of octets to be sent, and fill it from …\nSet the ACK delay duration.\nSet an algorithm for congestion control.\nSet the time-to-live (IPv4) or hop limit (IPv6) value used …\nSet the keep-alive interval.\nEnable or disable Nagle’s Algorithm.\nSet the timeout duration.\nEnable or disable TCP Timestamp.\nReturn the connection state, in terms of the TCP state …\nReturn the timeout duration.\nReturn whether TCP Timestamp is enabled.\nA buffer (re)assembler.\nEmpty packet description.\nError returned when dequeuing from an empty buffer.\nError returned when enqueuing into a full buffer.\nAn UDP packet ring buffer.\nSize and header of a packet.\nA trait for setting a value to a known state.\nA ring buffer.\nAdd a new contiguous range to the assembler, or return …\nAdd a segment, then remove_front.\nReturn the maximum number of elements in the ring buffer.\nClear the ring buffer.\nReturn the largest number of elements that can be added to …\nDequeue a single packet from the buffer, and return a …\nDequeue the given number of allocated buffer elements.\nDequeue a slice of elements up to the given size from the …\nCall <code>f</code> with the largest contiguous slice of allocated …\nDequeue an element from the buffer, and return a reference …\nCall <code>f</code> with a single buffer element, and dequeue the …\nDequeue as many elements from the buffer into the given …\nCall <code>f</code> with a single packet from the buffer, and dequeue …\nEnqueue a single packet with the given header into the …\nEnqueue a slice of elements up to the given size into the …\nCall <code>f</code> with the largest contiguous slice of unallocated …\nEnqueue a single element into the buffer, and return a …\nCall <code>f</code> with a single buffer element, and enqueue the …\nEnqueue as many elements from the given slice into the …\nEnqueue the given number of unallocated buffer elements.\nCall <code>f</code> with a packet from the buffer large enough to fit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the largest contiguous slice of allocated buffer …\nReturn the largest contiguous slice of unallocated buffer …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether the assembler contains no data.\nQuery whether the buffer is empty.\nQuery whether the buffer is empty.\nQuery whether the buffer is full.\nQuery whether the buffer is full.\nIterate over all of the contiguous data ranges.\nReturn the current number of elements in the ring buffer.\nCreate a new buffer assembler.\nCreate a new packet buffer with the provided metadata and …\nCreate a ring buffer with the given storage.\nReturn the maximum number packets that can be stored.\nReturn the current number of bytes in the payload ring …\nReturn the maximum number of bytes in the payload ring …\nPeek at a single packet from the buffer without removing …\nReturn length of the front contiguous range without …\nRead as many elements from allocated buffer elements into …\nRemove a contiguous range from the front of the assembler. …\nClear the ring buffer, and reset every element.\nReturn the number of elements that can be added to the …\nWrite as many elements from the given slice into …\nA relative amount of time.\nA representation of an absolute time value.\nThe longest possible duration we can encode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Instant</code> from a number of microseconds.\nCreate a new <code>Duration</code> from a number of microseconds.\nCreate a new <code>Instant</code> from a number of milliseconds.\nCreate a new <code>Duration</code> from a number of milliseconds.\nCreate a new <code>Instant</code> from a number of milliseconds.\nCreate a new <code>Instant</code> from a number of seconds.\nCreate a new <code>Duration</code> from a number of seconds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe fractional number of microseconds that have passed …\nThe fractional number of milliseconds in this <code>Duration</code>.\nThe fractional number of milliseconds that have passed …\nThe fractional number of milliseconds in this <code>Duration</code>.\nThe number of whole seconds that have passed since the …\nThe number of whole seconds in this <code>Duration</code>.\nThe total number of milliseconds that have passed since …\nThe total number of microseconds in this <code>Duration</code>.\nThe total number of milliseconds that have passed since …\nThe total number of milliseconds in this <code>Duration</code>.\nAddress unreachable.\nCommunication with destination administratively prohibited.\nInterface wishes to listen to the sources in the specified …\nARP hardware type.\nARP operation type.\nA read/write wrapper around an Address Resolution Protocol …\nA high-level representation of an Address Resolution …\nPointer indicates the error\nThe size of an IPv4 address in bits.\nThe size of an IPv6 address in bits.\nThe broadcast address.\nAn IPv4 address representing the broadcast address: …\nBad length\nBeyond scope of source address.\nInterface no longer wishes to listen to the sources in the …\nInterface has changed to a filter mode of EXCLUDE for the …\nInterface has changed to a filter mode of INCLUDE for the …\nCommunication administratively prohibited\nPer RFC 2711 § 2.1, Router Alert options always have 2 …\nThe possible message types of a DHCP packet.\nThe possible opcodes of a DHCP packet.\nA representation of a single DHCP option.\nA buffer for DHCP options.\nA read/write wrapper around a Dynamic Host Configuration …\nA high-level representation of a Dynamic Host …\nDiscard the containing packet\nDiscard the containing packet and notify the sender\nDiscard the containing packet and only notify the sender …\nDestination host unknown\nDestination network unknown\nDestination unreachable\nDestination Unreachable.\nThe Ethernet header length\nEcho reply\nEcho Reply\nEcho request\nEcho Request\nContains the error value\nErroneous header field encountered.\nParsing a packet failed.\nA six-octet Ethernet II address.\nA read/write wrapper around an Ethernet II frame buffer.\nAn Ethernet and IPv4 Address Resolution Protocol packet.\nEthernet protocol type.\nA high-level representation of an Internet Protocol …\nRFC3692-style Experiment 1\nRFC3692-style Experiment 2\nSource address failed ingress/egress policy.\nFragment reassembly time exceeded\nFragment reassembly time exceeded.\nFragmentation required, and DF flag set\nRepresentation of an hardware address, such as an Ethernet …\nHop limit exceeded in transit.\nRedirect Datagram for the Host\nHost precedence violation\nHost administratively prohibited\nRedirect Datagram for the ToS &amp; host\nHost unreachable for ToS\nDestination host unreachable\nMinimum MTU required of all links supporting IPv4. See RFC …\nAll multicast-capable routers\nAll multicast-capable nodes\nLength of an IPv6 header.\nThe link-local all MLVDv2-capable routers multicast address…\nThe link-local all nodes multicast address.\nThe link-local all routers multicast address.\nThe link-local all RPL nodes multicast address.\nMinimum MTU required of all links supporting IPv6. See RFC …\nInternet protocol control message subtype for type “…\nInternet protocol control message type.\nA read/write wrapper around an Internet Control Message …\nInternet protocol control message subtype for type “…\nInternet protocol control message subtype for type “…\nA high-level representation of an Internet Control Message …\nInternet protocol control message subtype for type “Time …\nInternet protocol control message subtype for type “…\nInternet protocol control message type.\nA read/write wrapper around an Internet Control Message …\nInternet protocol control message subtype for the type “…\nA high-level representation of an Internet Control Message …\nInternet protocol control message subtype for the type “…\nA read/write wrapper around an Internet Group Management …\nA high-level representation of an Internet Group …\nType of IGMP membership report version\nAn internetworking address.\nA specification of a CIDR block, containing an address and …\nAn internet endpoint address.\nAn internet endpoint address for listening.\nIP datagram encapsulated protocol.\nAn IP packet representation.\nInternet protocol version.\nAn IPv4 address.\nAn IPv4 address.\nA specification of an IPv4 CIDR block, containing an …\nA read/write wrapper around an Internet Protocol version 4 …\nA high-level representation of an Internet Protocol …\nAn IPv6 address.\nAn IPv6 address.\nA specification of an IPv6 CIDR block, containing an …\nA read/write wrapper around an IPv6 Extension Header …\nA read/write wrapper around an IPv6 Fragment Header.\nA high-level representation of an IPv6 Fragment header.\nA read/write wrapper around an IPv6 Hop-by-Hop Header …\nA high-level representation of an IPv6 Hop-by-Hop Header.\nA read/write wrapper around an IPv6 Extension Header …\nAction required when parsing the given IPv6 Extension …\nA high-level representation of an IPv6 Extension Header …\nA high-level representation of an IPv6 Router Alert Header …\nIPv6 Extension Header Option Type\nA iterator for IPv6 options.\nA read/write wrapper around an Internet Protocol version 6 …\nA high-level representation of an Internet Protocol …\nA read/write wrapper around an IPv6 Routing Header buffer.\nA high-level representation of an IPv6 Routing Header.\nIPv6 Extension Routing Header Routing Type\nAn IPv4 address with the address pointing to localhost: …\nAn IPv6 address representing localhost: <code>::1</code>.\nMissing a required option\nA read/write wrapper around an MLDv2 Listener Report …\nA high level representation of an MLDv2 Listener Report …\nMulticast Listener Query\nMLDv2 Multicast Listener Report Record Type. See RFC 3810 …\nMulticast Listener Report\nA high-level representation of an MLDv2 packet header.\nInterface has a filter mode of EXCLUDE for the specified …\nInterface has a filter mode of INCLUDE for the specified …\nMTU\nA read/write wrapper around an NDISC Option.\nA high-level representation of an NDISC Option.\nNDISC Option Type\nA high-level representation of an Neighbor Discovery …\nNeighbor Advertisement\nNeighbor Solicitation\nRedirect Datagram for the Network\nNetwork administratively prohibited\nRedirect Datagram for the ToS &amp; network\nNetwork unreachable for ToS\nDestination network unreachable\nNimrod (DEPRECATED 2009-05-06)\nNo Route to destination.\nContains the success value\n1 byte of padding\nMultiple bytes of padding\nParameter problem\nParameter Problem.\nPacket Too Big.\nDestination port unreachable\nPort unreachable.\nPrecedence cutoff in effect\nPrefix Information\nDestination protocol unreachable\nUnparsed hardware address.\nMessage redirect\nRedirect\nRedirected Header\nReject route to destination.\nReserved for future use\nRouter advertisement\nRouter Advertisement\nRouter Alert\nRouter solicitation\nRouter Solicitation\nRPL Option\nRPL Source Routing Header\nRPL Control Message\nThe solicited node prefix.\nSkip this option and continue processing the packet\nSource Link-layer Address\nSource host isolated\nSource route failed\nTarget Link-layer Address\nThe possible control flags of a Transmission Control …\nA representation of a single TCP option.\nA read/write wrapper around a Transmission Control …\nA high-level representation of a Transmission Control …\nA TCP sequence number.\nTime exceeded\nTime Exceeded.\nTimestamp\nTimestamp reply\nTTL expired in transit\nSource Route (DEPRECATED)\nType 2 Routing Header for Mobile IPv6\nAn IPv4 address representing an unspecified address: …\nAn IPv6 address representing the unspecified address: <code>::</code>.\nA read/write wrapper around an User Datagram Protocol …\nA high-level representation of an User Datagram Protocol …\nUnrecognized Next Header type encountered.\nUnrecognized IPv6 option encountered.\nIGMPv1\nIGMPv2\nReturn the ACK flag.\nReturn the acknowledgement number field.\nWhen returned from <code>Repr::parse</code>, this field will be <code>None</code>. …\nReturn the IP address of this CIDR block.\nReturn the address of this IPv4 CIDR block.\nReturn the address of this IPv6 CIDR block.\nReturn the address vector in bytes\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturn an Ethernet address as a sequence of octets, in …\nReturns the four eight-bit integers that make up this …\nReturns the sixteen eight-bit integers the IPv6 address …\nReturn the length of the auxiliary data.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\nToggles the set of flags.\nToggles the set of flags.\nReturn the broadcast address of this IPv4 CIDR.\nBroadcast flags. It can be set in DHCPDISCOVER, DHCPINFORM …\nReturn the length of a packet that will be emitted from …\nReturn the length of a packet that will be emitted from …\nReturn the length of a buffer required to hold a packet …\nReturn the length of a header that will be emitted from …\nReturn the length of a packet that will be emitted from …\nReturn the length of a packet that will be emitted from …\nReturn the length of a packet that will be emitted from …\nReturn the total length of a packet that will be emitted …\nReturn the length of a header that will be emitted from …\nReturn the length of a header that will be emitted from …\nReturn the length, in bytes, of a header that will be …\nReturn the length, in bytes, of a header that will be …\nReturn the length of a header that will be emitted from …\nReturn the length, in bytes, of a header that will be …\nReturn the length of a record that will be emitted from …\nReturn the length of a packet that will be emitted from …\nReturn the length of a header that will be emitted from …\nReturn the length of a packet that will be emitted from …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nEnsure that no accessor method will panic if called. …\nReturn the checksum field.\nReturn the checksum field.\nReturn the checksum field.\nReturn the header checksum field.\nReturn the checksum field.\nReturn the checksum field.\nClear the entire flags field.\nClear the entire flags field.\nClear the reserved bits.\nClear the reserved bits.\nClear any reserved fields in the message header.\nSet reserved fields.\nInitialize reserved fields to 0.\nClear the Suppress Router-Side Processing flag.\nReturns the hardware address of the client (called <code>chaddr</code> …\nThis field is also known as <code>chaddr</code> in the RFC and for …\nThe “client identifier” option.\nReturns the Ipv4 address of the client, zero if not set.\nThis field is also known as <code>ciaddr</code> in the RFC. It is only …\nReturn the number of prefix octets elided from the last …\nReturn the number of prefix octets elided from addresses[…\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nQuery whether the subnetwork described by this CIDR block …\nQuery whether the subnetwork described by this IPv4 CIDR …\nQuery whether the subnetwork described by this IPv6 CIDR …\nQuery whether the subnetwork described by this CIDR block …\nQuery whether the subnetwork described by this IPv4 CIDR …\nQuery whether the subnetwork described by this IPV6 CIDR …\nReturn the current hop limit field.\nReturn the CWR flag.\nReturn a pointer to the type-specific data.\nReturn the option data.\nReturn the option data.\nReturn the length of the data.\nReturn the length of the data.\nReturn a mutable pointer to the type-specific data.\nReturn a mutable pointer to the option data.\nReturn a mutable pointer to the option data.\nReturn the destination address field.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nDNS servers\nReturn the “don’t fragment” flag.\nReturn the Differential Services Code Point field.\nReturn the destination address field.\nReturn the destination address.\nReturn the destination address field.\nReturn the destination address field.\nIPv6 address of the destination node.\nReturn the destination port field.\nReturn the destination port field.\nReturn the ECE flag.\nReturn the identifier field (for echo request and reply …\nReturn the identifier field (for echo request and reply …\nReturn the sequence number field (for echo request and …\nReturn the sequence number field (for echo request and …\nReturn the Explicit Congestion Notification field.\nEmit a high-level representation into an Address …\nEmit a  <code>DhcpOption</code> into a <code>DhcpOptionWriter</code>.\nEmit a high-level representation into a Dynamic Host …\nEmit a high-level representation into an Ethernet II frame.\nEmit a high-level representation into an Internet Control …\nEmit a high-level representation into an Internet Control …\nEmit a high-level representation into an Internet Group …\nEmit this high-level representation into a buffer.\nEmit a high-level representation into an Internet Protocol …\nEmit a high-level representation into an Internet Protocol …\nEmit a high-level representation into an IPv6 Extension …\nEmit a high-level representation into an IPv6 Fragment …\nEmit a high-level representation into an IPv6 Hop-by-Hop …\nEmit a high-level representation into an IPv6 Extension …\nEmit a high-level representation into an IPv6 Routing …\nEmit a high-level representation into an MLDv2 address …\nEmit a high-level representation into an MLDv2 packet.\nEmit a high-level representation into an NDISC Option.\nEmit a high-level representation into a Transmission …\nEmit a high-level representation into an User Datagram …\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturn the EtherType field, without checking for 802.1Q.\nCompute and fill in the header checksum.\nCompute and fill in the header checksum.\nCompute and fill in the header checksum.\nCompute and fill in the header checksum.\nCompute and fill in the header checksum.\nCompute and fill in the header checksum.\nReturn the FIN flag.\nReturn the flow label field.\nReturn the fragment offset, in octets.\nReturn the fragment offset field.\nThe offset of the data following this header, relative to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nUses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nUses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> …\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConverts a native byte order <code>u32</code> into an IPv4 address.\nConverts a native byte order <code>u128</code> into an IPv6 address.\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nConstruct an Ethernet address from a sequence of octets, …\nCreate an IPv4 CIDR block from the given address and …\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nParse a string representation of an Ethernet address.\nParse a string representation of an IP address.\nParse a string representation of an IP CIDR.\nParse a string representation of an IPv4 CIDR.\nParse a string representation of an IPv6 CIDR.\nReturns the key for identifying the packet.\nReturn the source address field.\nReturn the hardware length field.\nReturns the length of a hardware address in bytes (e.g. 6 …\nReturn the hardware type field.\nReturns the hardware protocol type (e.g. ethernet).\nReturn the length of a frame header.\nReturn the header length. The result depends on the value …\nReturn the header length. The result depends on the value …\nReturn the length of a header that will be emitted from …\nReturn the header length, in octets.\nReturn the header length.\nReturn the header length field.\nReturn the length, in bytes, of a header that will be …\nReturn the header length, in octets.\nReturn the length of a header that will be emitted from …\nReturn the length of the packet header that will be …\nReturn the IPv6 Home Address\nReturn the TTL value.\nReturn the time to live field.\nReturn the hop limit field.\nThe 8-bit hop limit field.\nReturns the value of the <code>hops</code> field.\nReturn the fragment identification field.\nReturn the fragment identification value field.\nThe identification for every packet that is fragmented.\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the header, returning the underlying buffer.\nConsume the packet, returning the underlying buffer.\nConsume the packet, returning the underlying buffer.\nConsumes the frame, returning the underlying buffer.\nConsume the packet, returning the underlying buffer.\nConsume the packet, returning the underlying buffer.\nConsume the packet, returning the underlying buffer.\nConsume the packet, returning the underlying buffer.\nConsume the packet, returning the underlying buffer.\nConsume the header, returning the underlying buffer.\nConsume the header, returning the underlying buffer.\nConsume the ipv6 option, returning the underlying buffer.\nConsume the header, returning the underlying buffer.\nConsume the packet, returning the underlying buffer.\nConsume the NDISC option, returning the underlying buffer.\nConsume the packet, returning the underlying buffer.\nConsume the packet, returning the underlying buffer.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …\nReturns <code>true</code> if this is an address reserved for …\nQuery whether this address is the broadcast address.\nQuery whether the address is the broadcast address.\nQuery whether the address is a broadcast address.\nReturns <code>true</code> if this is a broadcast address (…\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturn whether the segment has no flags set (except PSH) …\nPer RFC 4443 § 2.1 ICMPv6 message types with the highest …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address is an IPv4-mapped address (…\nReturns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).\nQuery whether the “locally administered” bit in the …\nReturns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).\nReturns <code>true</code> if this is the loopback address (<code>::1</code>), as …\nReturn a boolean value indicating if the given message type\nQuery whether the “multicast” bit in the OUI is set.\nQuery whether the address is a valid multicast address.\nReturns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).\nReturns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).\nReturn a boolean value indicating if the given message type\nReturns <code>true</code> if this is a private address.\nReturns <code>true</code> if this address is reserved by IANA for …\nReturns <code>true</code> if this address is part of the Shared Address …\nQuery whether the endpoint has a specified address and …\nQuery whether the address is an unicast address.\nQuery whether the address is a valid unicast address.\nQuery whether the address is an unicast address.\nReturns <code>true</code> if this is a unicast address, as defined by …\nReturns <code>true</code> if the address is a globally routable unicast …\nReturns <code>true</code> if the address is a unicast address with …\nReturns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).\nQuery whether the address falls into the “unspecified” …\nReturns <code>true</code> for the special ‘unspecified’ address (…\nReturns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…\nThe DHCP IP lease duration, specified in seconds.\nReturn the length of a control flag, in terms of sequence …\nReturn the length field.\nReturn the Source/Target Link-layer Address.\nReturns the value of the <code>magic cookie</code> field in the DHCP …\nReturn the maximum response code field.\nReturn the maximum response time, using the encoding …\nThe maximum size dhcp packet the interface can receive\nReturn the address being queried.\nReturn the multicast address field.\nThis field is also known as <code>op</code> in the RFC. It indicates …\nThe hop-by-hop header containing a MLDv2 router alert …\nReturn the “more fragments” flag.\nReturn more fragment flag field.\nWhen there are more fragments following this header\nReturn the message code field.\nReturn the message code field.\nReturn the message type field.\nReturn the message type field.\nReturn the message type field.\nReturn the MTU value.\nReturns the address’s multicast scope if the address is …\nReturn the Neighbor Solicitation flags.\nReturn the network mask of this IPv4 CIDR.\nReturn the network block of this IPv4 CIDR.\nCreate a CIDR block from the given address and prefix …\nCreate an endpoint address from given address and port.\nCreate a new IpRepr, choosing the right IP version for the …\nCreate an IPv4 CIDR block from the given address and …\nCreate an IPv6 CIDR block from the given address and …\nCreate a new <code>Ipv6OptionsIterator</code>, used to iterate over the …\nCreate a new MLDv2 address record representation with an …\nCreates a new IPv4 address from four eight-bit octets.\nCreates a new IPv6 address from eight 16-bit segments.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nShorthand for a combination of new_unchecked and check_len.\nCreate a raw octet buffer with an IPv6 Hop-by-Hop Header …\nImbue a raw octet buffer with ARP packet structure.\nImbue a raw octet buffer with DHCP packet structure.\nImbue a raw octet buffer with Ethernet frame structure.\nImbue a raw octet buffer with ICMPv4 packet structure.\nImbue a raw octet buffer with ICMPv6 packet structure.\nImbue a raw octet buffer with IGMPv2 packet structure.\nImbue a raw octet buffer with IPv4 packet structure.\nCreate a raw octet buffer with an IPv6 packet structure.\nCreate a raw octet buffer with an IPv6 Extension Header …\nCreate a raw octet buffer with an IPv6 Fragment Header …\nCreate a raw octet buffer with an IPv6 Extension Header …\nCreate a raw octet buffer with an IPv6 Routing Header …\nImbue a raw octet buffer with a Address Record structure.\nCreate a raw octet buffer with an NDISC Option structure.\nImbue a raw octet buffer with TCP packet structure.\nImbue a raw octet buffer with UDP packet structure.\nReturn the next header (protocol).\nReturn the next_header (protocol) field.\nReturn the next header field.\nReturn the next header field.\nProtocol contained in the next header.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturn the number of Multicast Address Records.\nReturn the NS flag.\nReturn number of sources.\nReturn the number of sources field.\nReturns the four eight-bit integers that make up this …\nReturns the sixteen eight-bit integers the IPv6 address …\nReturn the version of an IP packet stored in the provided …\nReturns the operation code of this packet.\nReturn the operation field.\nReturn the option type.\nReturn the option type.\nReturn the options of the IPv6 Hop-by-Hop header.\nReturn an iterator over the options.\nReturn a pointer to the options.\nReturn a mutable pointer to the options of the IPv6 …\nReturn a pointer to the options.\nReturn a pointer to the options.\nReturn the number of octets used for padding after …\nReturn the pointer field (for parameter problem messages).\nThe parameter request list informs the server about which …\nParse an Address Resolution Protocol packet and return a …\nParse a DHCP packet and return a high-level representation.\nParse an Ethernet II frame and return a high-level …\nParse an Internet Control Message Protocol version 4 …\nParse an Internet Control Message Protocol version 6 …\nParse an Internet Group Management Protocol v1/v2 packet …\nParse an Internet Protocol version 4 packet and return a …\nParse an Internet Protocol version 6 packet and return a …\nParse an IPv6 Extension Header Header and return a …\nParse an IPv6 Fragment Header and return a high-level …\nParse an IPv6 Hop-by-Hop Header and return a high-level …\nParse an IPv6 Extension Header Option and return a …\nParse an IPv6 Routing Header and return a high-level …\nParse an MLDv2 address record and return a high-level …\nParse an MLDv2 packet and return a high-level …\nParse an NDISC packet and return a high-level …\nParse an NDISC Option and return a high-level …\nParse a Transmission Control Protocol packet and return a …\nParse an User Datagram Protocol packet and return a …\nParse an IPv4 address from a slice of bytes.\nParse an IPv6 address from a slice of bytes.\nReturn a pointer to the payload, without checking for …\nReturn a pointer to the type-specific data.\nReturn a pointer to the payload.\nReturn a pointer to the payload.\nReturn the payload of the IPv6 extension header.\nReturn a pointer to the address records.\nReturn a pointer to the payload.\nReturn a pointer to the payload.\nReturn the payload length.\nReturn the payload length field.\nLength of the payload including the extension headers.\nReturn a mutable pointer to the payload.\nReturn a mutable pointer to the type-specific data.\nReturn a mutable pointer to the payload.\nReturn a mutable pointer to the payload.\nReturn a mutable pointer to the payload data.\nReturn a pointer to the address records.\nReturn a mutable pointer to the payload data.\nReturn a mutable pointer to the payload.\nReturn the MTU field (for packet too big messages).\nReturn the preferred lifetime of the prefix.\nReturn the prefix.\nReturn the prefix information flags.\nIf <code>self</code> is a CIDR-compatible subnet mask, return …\nReturn the prefix length of this CIDR block.\nReturn the prefix length of this IPv4 CIDR block.\nReturn the prefix length of this IPv6 CIDR block.\nReturn the prefix length.\nPretty-printing of packet representation.\nReturn the protocol length field.\nReturn the protocol type field.\nReturn the PSH flag.\nAppend a PadN option to the vector of hop-by-hop options\nReturn the Querier’s Query Interval Code.\nReturn the Querier’s Robustness Variable.\nTurn the PSH flag into no flag, and keep the rest as-is.\nReturn the reachable time field.\nThe DHCP IP rebind duration (T2 interval), in seconds, if …\nReturn the record type for the given sources.\nReturns the value of the <code>giaddr</code> field, zero if not set.\nThis field is also known as <code>giaddr</code> in the RFC. In order to …\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nThe DHCP IP renew duration (T1 interval), in seconds, if …\nThe “requested IP address” option. It can be used by …\nReturn the retransmit time field.\nDefault gateway\nReturn the Router Advertisement flags.\nReturn the router lifetime field.\nReturn the routing type field.\nReturn the RST flag.\nReturn the Suppress Router-Side Processing flag.\nReturns the value of the <code>secs</code> field.\nseconds elapsed since client began address acquisition or …\nReturn the length of the segment, in terms of sequence …\nReturn the length of the segment, in terms of sequence …\nReturns the eight 16-bit segments that make up this …\nReturn the segments left field.\nReturns whether the selective acknowledgement SYN flag is …\nReturn the selective acknowledgement ranges, if any. If …\nReturn the sequence number field.\nThe “server identifier” option. It is used both to …\nReturns the value of the <code>siaddr</code> field, zero if not set.\nThis field is also known as <code>siaddr</code> in the RFC. It may be …\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nSet the ACK flag.\nSet the acknowledgement number field.\nSet address data\nReturn the length of the auxiliary data.\nSet the checksum field.\nSet the checksum field.\nSet the header checksum field.\nSet the checksum field.\nSet the checksum field.\nSets the ethernet address of the client.\nSets the Ipv4 address of the client.\nSet the number of prefix octets elided from the last …\nSet the number of prefix octets elided from addresses[…\nSet the current hop limit field.\nSet the CWR flag.\nSet the option data length.\nSet the option data length.\nSet the destination address field.\nSet the “don’t fragment” flag.\nSet the Differential Services Code Point field.\nSet the destination address field.\nSet the destination address field.\nSet the destination address field.\nSet the destination port field.\nSet the destination port field.\nSet the ECE flag.\nSet the identifier field (for echo request and reply …\nSet the identifier field (for echo request and reply …\nSet the sequence number field (for echo request and reply …\nSet the sequence number field (for echo request and reply …\nSet the Explicit Congestion Notification field.\nSet the EtherType field.\nSet the FIN flag.\nSets the flags to the specified value.\nSet the flow label field.\nSet the fragment offset, in octets.\nSet the fragment offset field.\nSet the group address field\nSet the hardware length field.\nSets the hardware address length.\nSet the hardware type field.\nSets the hardware address type (only ethernet is …\nSet the header length, in octets.\nSet the extension header data length. The length of the …\nSet the header length, in octets.\nSet the Ipv6 Home Address\nSet the time to live field.\nSet the hop limit field.\nSets the hops field.\nSet the fragment identification field.\nSet the fragmentation identification field.\nSet the length field.\nSet the Source/Target Link-layer Address.\nSets the value of the <code>magic cookie</code> field in the DHCP …\nSet the maximum response code field.\nSet the maximum response time, using the encoding …\nSet the address being queried.\nReturn the multicast address field.\nSet the “more fragments” flag.\nSet the more fragments flag field.\nSet the message code field.\nSet the message code field.\nSet the message type field.\nSet the message type field.\nSet the message type field.\nSet the MTU value.\nSet the Neighbor Solicitation flags.\nSet the next header (protocol) field.\nSet the next header field.\nSet the next header field.\nSet the number of Multicast Address Records.\nSet the NS flag.\nSet number of sources.\nReturn the number of sources field.\nSets the <code>OpCode</code> for the packet.\nSet the operation field.\nSet the option type.\nSet the option type.\nSet the number of octets used for padding after …\nSet the pointer field (for parameter problem messages).\nSet the payload length.\nSet the payload length field.\nSet the MTU field (for packet too big messages).\nSet the preferred lifetime of the prefix.\nSet the prefix.\nSet the prefix information flags.\nSet the prefix length.\nSet the protocol length field.\nSet the protocol type field.\nSet the PSH flag.\nSet the Querier’s Query Interval Code.\nSet the Querier’s Robustness Variable.\nSet the reachable time field.\nReturn the record type for the given sources.\nSets the value of the <code>giaddr</code> field.\nSet the retransmit time field.\nSet the Router Advertisement flags.\nSet the router lifetime field.\nSet the routing type.\nSet the RST flag.\nSet the Suppress Router-Side Processing flag.\nSets the <code>secs</code> field.\nSet the segments left field.\nSet the sequence number field.\nSets the value of the <code>siaddr</code> field.\nSets the optional <code>sname</code> (“server name”) and <code>file</code> …\nSet the source hardware address field.\nSet the source protocol address field.\nSet the source address field.\nSet the source address field.\nSet the source address field.\nSet the source port field.\nSet the source port field.\nSet the SYN flag.\nSet the target address field.\nSet the target hardware address field.\nSet the target protocol address field.\nSet the total length field.\nSet the traffic class field.\nSets the transaction ID.\nSet the URG flag.\nSet the urgent pointer field.\nSet the valid lifetime of the prefix.\nSet the version field.\nSet the version field.\nSet the window size field.\nSets the value of the <code>yiaddr</code> field.\nReturn the source hardware address field.\nReturn the source protocol address field.\nReturn the source address field.\nReturn the source address.\nReturn the source address field.\nReturn the source address field.\nIPv6 address of the source node.\nReturn the source port field.\nReturn the source port field.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nThis field comes from a corresponding DhcpOption.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nReturn the SYN flag.\nReturn the target address field.\nReturn the target hardware address field.\nReturn the target protocol address field.\nConverts an IPv4 address into a <code>u32</code> representation using …\nConverts an IPv6 address into a <code>u128</code> representation using …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IPv4</code> address if it is either …\nConverts this address to an <code>IPv4</code> address if it’s an …\nConverts this address to an IPv4-compatible <code>IPv6</code> address.\nConverts this address to an IPv4-mapped <code>IPv6</code> address.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nReturn the total length field.\nReturn the payload length added to the known header length.\nReturn the traffic class.\nReturns the transaction ID.\nThis field is also known as <code>xid</code> in the RFC. It is a random …\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturn the URG flag.\nReturn the urgent pointer field.\nCreate an address wrapping an IPv4 address with the given …\nCreate an address wrapping an IPv6 address with the given …\nReturn the valid lifetime of the prefix.\nValidate the header checksum.\nValidate the header checksum.\nValidate the header checksum.\nValidate the header checksum.\nValidate the packet checksum.\nValidate the packet checksum.\nReturn the protocol version.\nReturn the protocol version.\nReturn the version field.\nReturn the version field.\nReturn the window size field.\nReturns the value of the <code>yiaddr</code> field, zero if not set.\nThis field is also known as <code>yiaddr</code> in the RFC.\nVector of addresses, numbered 1 to <code>n</code>.\nNumber of prefix octets from the last segment that are …\nNumber of prefix octets from each segment, except the last …\nThe home address of the destination mobile node.\nNumber of octets that are used for padding after <code>address[n]</code>…\nNumber of route segments remaining.\nNumber of route segments remaining.\nIndentation state.\nInterface for printing listings.\nWrapper for using a <code>PrettyPrint</code> where a <code>Display</code> is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrease indentation level.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFormat the listing with the recorded parameters when …\nCreate an indentation state. The entire listing will be …\nWrite a concise, formatted representation of a packet …\nCreate a <code>PrettyPrinter</code> which prints the given object.")