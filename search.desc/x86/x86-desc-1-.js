searchState.loadedDescShard("x86", 1, "Reload data segment register.\nReload es segment register.\nReload fs segment register.\nReload gs segment register.\nReload stack segment register.\nCreate a new SegmentSelector\nReturns the complement of this set of flags.\nIndicates whether the segment is present in memory (set) …\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nSet AVL bit. System software can use this bit to store …\nCreate a new segment, TSS or LDT descriptor by setting the …\nSet D/B. Performs different functions depending on whether …\nSpecifies the privilege level of the segment. The DPL is …\nSet G bit Determines the scaling of the segment limit …\nSet L In IA-32e mode, bit 21 of the second doubleword of …\nSet Present bit. Indicates whether the segment is present …\nSpecifies whether the segment descriptor is for a system …\nCreates a new descriptor with selector and offset (for IDT …\nSet the type of the descriptor (bits 8-11). Indicates the …\nReturns the current value of the stack segment register.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nLoads the task register.\nReturns the current value of the task register.\nRead the time stamp counter.\nRead the time stamp counter.\nInvalidate the given address in the TLB using the <code>invlpg</code> …\nInvalidate the TLB completely by reloading the CR3 …\nContains the error value\nContains the success value\nA specialized <code>Result</code> type for VMX operations.\nPossible outcomes of VMfail pseudo-function used to convey …\nVMCS pointer is not valid.\nVMCS pointer is valid, but some other error was …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVirtual-machine control structure fields.\nVM-execution, VM-exit, and VM-entry control fields.\nFields used to access guest-state area.\nFields used to access host-state area.\nVM-exit information fields.\nAcknowledge interrupt on exit.\nAPIC-access address (full).\nAPIC-access address (high).\nClear IA32_BNDCFGS.\nClear IA32_RTIT_CTL.\nConceal VMX from PT.\nConceal VMX from PT.\nConceal VMX from PT.\nCR0 guest/host mask.\nCR0 read shadow.\nCR3-load exiting.\nCR3-store exiting.\nCR3-target count.\nCR3-target value 0.\nCR3-target value 1.\nCR3-target value 2.\nCR3-target value 3.\nCR4 guest/host mask.\nCR4 read shadow.\nCR8-load exiting.\nCR8-store exiting.\nDeactivate dual-monitor treatment.\nDescriptor-table exiting.\nEnable EPT.\nEnable INVPCID.\nEnable PML.\nEnable RDTSCP.\nEnable user wait and pause.\nEnable VM functions.\nEnable VPID.\nEnable XSAVES/XRSTORS.\nEnable ENCLS exiting.\nENCLS-exiting bitmap (full).\nENCLS-exiting bitmap (high).\nEnable ENCLV exiting.\nEntry to SMM.\nEOI-exit bitmap 0 (full).\nEOI-exit bitmap 0 (high).\nEOI-exit bitmap 1 (full).\nEOI-exit bitmap 1 (high).\nEOI-exit bitmap 2 (full).\nEOI-exit bitmap 2 (high).\nEOI-exit bitmap 3 (full).\nEOI-exit bitmap 3 (high).\nEPT pointer (full).\nEPT pointer (high).\nEPTP index.\nEPTP-list address (full).\nEPTP-list address (high).\nEPT-violation #VE.\nException bitmap.\nExecutive-VMCS pointer (full).\nExecutive-VMCS pointer (high).\nExternal-interrupt exiting.\nVM-entry controls.\nVM-exit controls.\nHLT exiting.\nHost address-space size.\nIA-32e mode guest.\nIntel PT uses guest physical addresses.\nInterrupt-window exiting.\nINVLPG exiting.\nAddress of I/O bitmap A (full).\nAddress of I/O bitmap A (high).\nAddress of I/O bitmap B (full).\nAddress of I/O bitmap B (high).\nLoad debug controls.\nLoad IA32_BNDCFGS.\nLoad IA32_EFER.\nLoad IA32_EFER.\nLoad IA32_PAT.\nLoad IA32_PAT.\nLoad IA32_PERF_GLOBAL_CTRL.\nLoad IA32_PERF_GLOBAL_CTRL.\nLoad IA32_RTIT_CTL.\nMode-based execute control for EPT.\nMONITOR exiting.\nMonitor trap flag.\nMOV-DR exiting\nAddress of MSR bitmaps (full).\nAddress of MSR bitmaps (high).\nMWAIT exiting.\nNMI exiting.\nNMI-window exiting.\nPage-fault error-code mask.\nPage-fault error-code match.\nPAUSE exiting.\nPAUSE-loop exiting.\nPin-based VM-execution controls.\nPLE_Gap.\nPLE_Window.\nPML address (full).\nPML address (high).\nProcess posted interrupts.\nPosted-interrupt descriptor address (full).\nPosted-interrupt descriptor address (high).\nPosted-interrupt notification vector.\nPrimary processor-based VM-execution controls.\nPin-based VM-execution controls.\nPrimary processor-based VM-execution controls.\nRDPMC exiting.\nRDRAND exiting.\nRDSEED exiting.\nRDTSC exiting.\nSave debug controls.\nSave IA32_EFER.\nSave IA32_PAT.\nSave VMX-preemption timer.\nActivate secondary controls.\nSecondary processor-based VM-execution controls.\nSub-page-permission-table pointer (full).\nSub-page-permission-table pointer (high).\nSub-page write permissions for EPT.\nSecondary processor-based VM-execution controls.\nTPR threshold.\nTSC multiplier (full).\nTSC multiplier (high).\nTSC offset (full).\nTSC offset (high).\nUnconditional I/O exiting.\nUnrestricted guest.\nUse I/O bitmaps.\nUse MSR bitmaps.\nUse TPR shadow.\nUse TSC offsetting.\nUse TSC scaling.\nVirtualize APIC accesses.\nAPIC-register virtualization.\nVirtualize x2APIC mode.\nVirtual-interrupt delivery.\nVirtual NMIs.\nVirtual-APIC address (full).\nVirtual-APIC address (high).\nVirtualization-exception information address (full).\nVirtualization-exception information address (high).\nVMCS shadowing.\nVM-entry controls.\nVM-entry exception error code.\nVM-entry instruction length.\nVM-entry interruption-information field.\nVM-entry MSR-load address (full).\nVM-entry MSR-load address (high).\nVM-entry MSR-load count.\nVM-exit controls.\nVM-exit MSR-load address (full).\nVM-exit MSR-load address (high).\nVM-exit MSR-load count.\nVM-exit MSR-store address (full).\nVM-exit MSR-store address (high).\nVM-exit MSR-store count.\nVMREAD-bitmap address (full).\nVMREAD-bitmap address (high).\nVMWRITE-bitmap address (full).\nVMWRITE-bitmap address (high).\nActivate VMX-preemption timer.\nVM-function controls (full).\nVM-function controls (high).\nVirtual-processor identifier (VPID).\nWBINVD exiting.\nXSS-exiting bitmap (full).\nXSS-exiting bitmap (high).\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nAdds the set of flags.\nAdds the set of flags.\nAdds the set of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nToggles the set of flags.\nToggles the set of flags.\nToggles the set of flags.\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns an empty set of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nGuest activity state.\nGuest CR0.\nGuest CR3.\nGuest CR4.\nGuest CS access rights.\nGuest CS base.\nGuest CS limit.\nGuest CS selector.\nGuest DR7.\nGuest DS access rights.\nGuest DS base.\nGuest DS limit.\nGuest DS selector.\nGuest ES access rights.\nGuest ES base.\nGuest ES limit.\nGuest ES selector.\nGuest FS access rights.\nGuest FS base.\nGuest FS limit.\nGuest FS selector.\nGuest GDTR base.\nGuest GDTR limit.\nGuest GS access rights.\nGuest GS base.\nGuest GS limit.\nGuest GS selector.\nGuest IA32_BNDCFGS (full).\nGuest IA32_BNDCFGS (high).\nGuest IA32_DEBUGCTL (full).\nGuest IA32_DEBUGCTL (high).\nGuest IA32_EFER (full).\nGuest IA32_EFER (high).\nGuest IA32_PAT (full).\nGuest IA32_PAT (high).\nGuest IA32_PERF_GLOBAL_CTRL (full).\nGuest IA32_PERF_GLOBAL_CTRL (high).\nGuest IA32_RTIT_CTL (full).\nGuest IA32_RTIT_CTL (high).\nGuest IA32_SYSENTER_CS.\nGuest IA32_SYSENTER_EIP.\nGuest IA32_SYSENTER_ESP.\nGuest IDTR base.\nGuest IDTR limit.\nGuest interruptibility state.\nGuest interrupt status.\nGuest LDTR access rights.\nGuest LDTR base.\nGuest LDTR limit.\nGuest LDTR selector.\nVMCS link pointer (full).\nVMCS link pointer (high).\nGuest PDPTE0 (full).\nGuest PDPTE0 (high).\nGuest PDPTE1 (full).\nGuest PDPTE1 (high).\nGuest PDPTE2 (full).\nGuest PDPTE2 (high).\nGuest PDPTE3 (full).\nGuest PDPTE3 (high).\nGuest pending debug exceptions.\nPML index.\nGuest RFLAGS.\nGuest RIP.\nGuest RSP.\nGuest SMBASE.\nGuest SS access rights.\nGuest SS base.\nGuest SS limit.\nGuest SS selector.\nGuest TR access rights.\nGuest TR base.\nGuest TR limit.\nGuest TR selector.\nVMX-preemption timer value.\nHost CR0.\nHost CR3.\nHost CR4.\nHost CS selector.\nHost DS selector.\nHost ES selector.\nHost FS base.\nHost FS selector.\nHost GDTR base.\nHost GS base.\nHost GS selector.\nHost IA32_EFER (full).\nHost IA32_EFER (high).\nHost IA32_PAT (full).\nHost IA32_PAT (high).\nHost IA32_PERF_GLOBAL_CTRL (full).\nHost IA32_PERF_GLOBAL_CTRL (high).\nHost IA32_SYSENTER_CS.\nHost IA32_SYSENTER_EIP.\nHost IA32_SYSENTER_ESP.\nHost IDTR base.\nHost RIP.\nHost RSP.\nHost SS selector.\nHost TR base.\nHost TR selector.\nExit qualification.\nExit reason.\nGuest-linear address.\nGuest-physical address (full).\nGuest-physical address (high).\nIDT-vectoring error code.\nIDT-vectoring information field.\nI/O RCX.\nI/O RDI.\nI/O RIP.\nI/O RSI.\nVM-exit instruction information.\nVM-exit instruction length.\nVM-exit interruption error code.\nVM-exit interruption information.\nVM-instruction error.")