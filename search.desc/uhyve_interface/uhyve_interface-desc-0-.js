searchState.loadedDescShard("uhyve_interface", 0, "Uhyve Hypervisor Interface\nPort address = <code>0x740</code>\nGet the size of the argument and environment strings. Used …\nPort address = <code>0x780</code>\nCopy the argument and environment strings into the VM. …\nPort address = <code>0x540</code>\nExit the VM and return a status.\nPort address = <code>0x480</code>\nPort address = <code>0x580</code>\nPort address = <code>0x440</code>\nPort address = <code>0x500</code>\nPort address = <code>0x840</code>\nPort address = <code>0x400</code>\nA 64-bit physical memory address.\nA canonical 64-bit virtual memory address.\nHypervisor calls available in Uhyve with their respective …\nEnum containing all valid port mappings for hypercalls.\nThe maximum number of items in an argument of environment …\nPort address = <code>0x680</code>\nPort address = <code>0x700</code>\nPort address = <code>0x640</code>\nPort address = <code>0x880</code>\nWrite a buffer to the terminal.\nWrite a char to the terminal.\nThe version of the Uhyve interface. Note: This is not the …\nPort address = <code>0x800</code>\nConverts the address to a mutable raw pointer.\nConverts the address to a raw pointer.\nConverts the address to an <code>u64</code>.\nConverts the address to an <code>u64</code>.\nDefines the Uhyve interface version in the note section.\nUtility to place the Uhyve interface version in the elf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a virtual address from the given pointer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the virtual address has the demanded …\nConvenience method for checking if an address is null.\nConvenience method for checking if an address is null.\nCreates a new canonical virtual address.\nCreates a new physical address.\nCreates a new canonical virtual address, throwing out bits …\nCreates a new physical address, throwing bits 52..64 away.\nCreates a new address, without any checks.\nCreates a new address, without any checks.\nReturns the 9-bit level 1 page table index.\nReturns the 9-bit level 2 page table index.\nReturns the 9-bit level 3 page table index.\nReturns the 9-bit level 4 page table index.\nReturns the 12-bit page offset of this virtual address.\nReturns the 9-bit level page table index.\nParameters for hypercalls.\nGet a hypercall’s port address.\nTries to create a new canonical virtual address.\nTries to create a new physical address.\nCreates an address that points to <code>0</code>.\nCreates an address that points to <code>0</code>.\nNote type for specifying the Uhyve interface version in an …\nA elf note header entry containing the used Uhyve …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParameters for a <code>FileClose</code> hypercall.\nParameters for a <code>Cmdsize</code> hypercall which provides the …\nParameters for a <code>Cmdval</code> hypercall, which copies the …\nParameters for a <code>Exit</code> hypercall.\nParameters for a <code>FileLseek</code> hypercall\nParameters for a <code>FileOpen</code> hypercall.\nParameters for a <code>FileRead</code> hypercall.\nParameters for a <code>SerialWriteBuffer</code> hypercall.\nParameters for a <code>FileUnlink</code> hypercall.\nParameters for a <code>FileWrite</code> hypercall.\nThe return code of the guest.\nNr of items in the kernel command line.\nLengths of the items in the kernel command line.\nPointer to a memory section in the VM memory which holds …\nBuffer to be written into the file.\nBuffer to read the file into.\nNr of items in the environment.\nPointer to a memory section in the VM memory which holds …\nLength of the items in the environment.\nFile descriptor of the file.\nFile descriptor of the file.\nFile descriptor of the file.\nFile descriptor of the file.\nPosix file access mode flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of bytes in the buffer to be written.\nNumber of bytes to read into the buffer.\nAccess permissions upon opening/creating a file.\nAddress of the file that should be unlinked.\nPathname of the file to be opened.\nOffset in the file.\nOn success, <code>0</code> is returned.  On error, <code>-1</code> is returned.\nNumber of bytes read on success. <code>-1</code> on failure.\nZero on success, <code>-1</code> on failure.\nFile descriptor upon successful opening or <code>-1</code> upon failure.\n<code>whence</code> value of the lseek call.")