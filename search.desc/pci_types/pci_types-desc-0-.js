searchState.loadedDescShard("pci_types", 0, "Slowest time that a device will assert DEVSEL# for any bus …\nEndpoints have a Type-0 header, so the remainder of the …\nThe address of a PCIe function.\nEvery PCI configuration region starts with a header made …\nPCI-PCI Bridges have a Type-1 header, so the remainder of …\nGet a flags value with all known bits set.\nGet the contents of a BAR in a given slot. Empty bars will …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nIf returns <code>true</code> the device is capable of running at 66 …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe slowest time that a device will assert DEVSEL# for any …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nIf returns <code>true</code> the device can accept fast back-to-back …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nIf returns <code>true</code> the device implements the pointer for a …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRepresents the state of the device’s INTx# signal. If …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThis returns <code>true</code> only when the following conditions are …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWill be <code>true</code> whenever the device detects a parity error, …\nPerforms a PCI read at <code>address</code> with <code>offset</code>.\nWill return <code>true</code>, by a master device, whenever its …\nWill return <code>true</code>, by a master device, whenever its …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nWill be <code>true</code> whenever the device asserts SERR#.\nWill return <code>true</code> whenever a target device terminates a …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturn the IO port of this BAR or panic if not an IO BAR.\nReturn the address and size of this BAR or panic if not a …\nPerforms a PCI write at <code>address</code> with <code>offset</code>.\nWrite to a BAR, setting the address for a device to use.\nAGP Target PCI-PCI bridge capability, Cap ID = <code>0x0E</code>\nAccelerated graphics port capability, Cap ID = <code>0x02</code>\nBridge subsystem vendor/device ID capability, Cap ID = <code>0x0D</code>\nCompactPCI Central Resource Control capability, Cap ID = …\nCompactPCI HotSwap capability, Cap ID = <code>0x06</code>\nDebug port capability, Cap ID = <code>0x0A</code>\nHyperTransport capability, Cap ID = <code>0x08</code>\nDevice can send 1 interrupt. No interrupt vector …\nDevice can send 16 interrupts\nDevice can send 2 interrupts\nDevice can send 32 interrupts\nDevice can send 4 interrupts\nDevice can send 8 interrupts\nMessage signalling interrupts capability, Cap ID = <code>0x05</code>\nMSI-X capability, Cap ID = <code>0x11</code>\nSpecifies how many MSI interrupts one device can have. …\nPCI capabilities\nPCI Express capability, Cap ID = <code>0x10</code>\nPCI Standard Hot-Plug Controller capability, Cap ID = <code>0x0C</code>\nPCI-X capability, Cap ID = <code>0x07</code>\nPower management capability, Cap ID = <code>0x01</code>\nSlot identification capability, Cap ID = <code>0x04</code>\nWhen device should trigger the interrupt\nUnknown capability\nVendor-specific capability, Cap ID = <code>0x09</code>\nVital product data capability, Cap ID = <code>0x3</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDoes device supports masking individual vectors?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs device using 64-bit addressing?\nIs MSI capability enabled?\nGet pending interrupts\nGet interrupt mask\nHow many interrupts this device has?\nReturn how many interrupts the device is using\nEnable or disable MSI capability\nEnable MSI-X on the specified device feature.\nEnable/disable masking of all interrupts for this PCI …\nSet the memory address that will be written to when the …\nSet the memory address that will be written to when the …\nSet interrupt mask\nSet how many interrupts the device will use. If requested …\nThe index of the BAR that contains the MSI-X table.\nThe offset, in bytes, of the MSI-X table within its BAR.\nCombines the Base Class and the Sub-class of a device to …\nThe different register-level programming interfaces …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")