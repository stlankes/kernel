searchState.loadedDescShard("memory_addresses", 0, "Universal crate for machine address types.\nAn iterator over a memory range\nA memory range.\nError type for <code>AddrRange</code>\nThe range was constructed with the end before the start\nTrait that marks memory addresses.\nInner address type\nArchitecture specific address types\nCheck, wether <code>element</code> is part of the address range.\nEnd address (exclusive)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProduces an <code>AddrIter</code> to iterate over this memory range.\nAmount of addresses in the range.\nConstruct a new memory range from <code>start</code> (inclusive) to <code>end</code> …\nGet the raw underlying address value.\nStarting address\nPhysical and virtual addresses manipulation\nPhysical and virtual addresses manipulation\nPhysical and virtual addresses manipulation for 64-bit …\nPhysical and virtual addresses manipulation\nA physical memory address.\nA passed <code>u64</code> was not a valid physical address.\nA virtual memory address on <code>aarch64</code>.\nAn invalid virtual address.\nConverts the address to a mutable raw pointer.\nConverts the address to a raw pointer.\nConverts the address to an <code>u64</code>.\nConverts the address to an <code>u64</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a virtual address from the given pointer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience method for checking if an address is null.\nConvenience method for checking if an address is null.\nCreates a new canonical virtual address.\nCreates a new physical address.\nCreates a new canonical virtual address, throwing out bits …\nCreates a new physical address truncating non-address …\nCreates a new address, without any checks.\nCreates a new address, without any checks.\nTries to create a new canonical virtual address.\nTries to create a new physical address.\nCreates an address that points to <code>0</code>.\nCreates an address that points to <code>0</code>.\nA physical memory address.\nA passed <code>usize</code> was not a valid physical address.\nA virtual memory address.\nAn invalid virtual address\nConverts the address to a mutable raw pointer.\nConverts the address to a raw pointer.\nConverts the address to an <code>usize</code>.\nConverts the address to an <code>usize</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a virtual address from the given pointer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience method for checking if an address is null.\nConvenience method for checking if an address is null.\nCreates a new canonical virtual address.\nCreates a new physical address.\nCreates a new virtual address truncating non-address parts.\nCreates a new physical address truncating non-address …\nCreates a new address, without any checks.\nCreates a new address, without any checks.\nTries to create a new canonical virtual address.\nTries to create a new physical address.\nCreates an address that points to <code>0</code>.\nCreates an address that points to <code>0</code>.\nSize of a base page (4 KiB)\nSize of a giga page (1 GiB)\nSize of a mega page (2 MiB)\nA physical memory address.\nA passed <code>u64</code> was not a valid physical address.\nSize of a tera page (512 GiB)\nA virtual memory address on <code>riscv64</code>.\nAn invalid virtual address.\nConverts the address to a mutable raw pointer.\nConverts the address to a raw pointer.\nConverts the address to an <code>u64</code>.\nConverts the address to an <code>u64</code>.\nOffset within the 4 KiB page.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a virtual address from the given pointer\nOffset within the 1 GiB page.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience method for checking if an address is null.\nConvenience method for checking if an address is null.\nOffset within the 2 MiB page.\nCreates a new canonical virtual address.\nCreates a new physical address.\nCreates a new canonical virtual address.\nCreates a new physical address truncating non-address …\nCreates a new address, without any checks.\nCreates a new address, without any checks.\nOffset within the 512 GiB page.\nTries to create a new canonical virtual address.\nTries to create a new physical address.\nCreates an address that points to <code>0</code>.\nCreates an address that points to <code>0</code>.\nA 64-bit physical memory address.\nA passed <code>u64</code> was not a valid physical address.\nA canonical 64-bit virtual memory address.\nA passed <code>u64</code> was not a valid virtual address.\nConverts the address to a mutable raw pointer.\nConverts the address to a raw pointer.\nConverts the address to an <code>u64</code>.\nConverts the address to an <code>u64</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a virtual address from the given pointer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the virtual address has the demanded …\nConvenience method for checking if an address is null.\nConvenience method for checking if an address is null.\nCreates a new canonical virtual address.\nCreates a new physical address.\nCreates a new canonical virtual address, throwing out bits …\nCreates a new physical address, throwing bits 52..64 away.\nCreates a new address, without any checks.\nCreates a new address, without any checks.\nReturns the 9-bit level 1 page table index.\nReturns the 9-bit level 2 page table index.\nReturns the 9-bit level 3 page table index.\nReturns the 9-bit level 4 page table index.\nReturns the 12-bit page offset of this virtual address.\nReturns the 9-bit level page table index.\nTries to create a new canonical virtual address.\nTries to create a new physical address.\nCreates an address that points to <code>0</code>.\nCreates an address that points to <code>0</code>.")