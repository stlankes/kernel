searchState.loadedDescShard("managed", 0, "A library that provides a way to logically own objects, …\nBorrowed variant.\nBorrowed variant.\nBorrowed variant.\nBorrowed variant.\nBorrowed variant.\nA managed object.\nA managed map.\nA managed slice.\nOwned variant, only available with the <code>std</code> or <code>alloc</code> …\nOwned variant, only available with the <code>std</code> or <code>alloc</code> …\nOwned variant, only available with the <code>std</code> or <code>alloc</code> …\nOwned variant, only available with the <code>std</code> or <code>alloc</code> …\nOwned variant, only available with the <code>std</code> or <code>alloc</code> …\nProvides links between slots and elements.\nAn index into a slotmap.\nProvides a slotmap based on external memory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve a value by index.\nRetrieve a mutable value by index.\nTry to insert a value into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nManagedMap contains no elements?\nReturns the number of elements in the ManagedMap.\nCreate a slot map.\nRemove an element.\nReserve a new entry.")