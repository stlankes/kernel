searchState.loadedDescShard("volatile", 0, "Provides volatile wrapper types for raw pointers.\nWraps a pointer to make accesses to the referenced value …\nVolatile pointer type that respects Rust’s aliasing …\nMarker types for limiting access.\nBorrows this <code>VolatileRef</code> as a mutable <code>VolatilePtr</code>.\nBorrows this <code>VolatileRef</code> as a read-only <code>VolatilePtr</code>.\nExtracts the wrapped raw pointer.\nImmutably borrows from this <code>VolatileRef</code>.\nMutably borrows from this <code>VolatileRef</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>VolatileRef</code> from the given mutable reference.\nCreates a <code>VolatileRef</code> from the given shared reference.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>VolatileRef</code> into a <code>VolatilePtr</code> with full …\nConstructs a new <code>VolatilePtr</code> by mapping the wrapped …\nProvides safe field projection for volatile pointers …\nTurns the given pointer into a <code>VolatilePtr</code>.\nTurns the given pointer into a <code>VolatileRef</code>.\nCreates a new read-only volatile pointer from the given …\nTurns the given pointer into a read-only <code>VolatileRef</code>.\nCreates a new volatile pointer with restricted access from …\nTurns the given pointer into a <code>VolatileRef</code> instance with …\nPerforms a volatile read of the contained value.\nRestricts access permissions to read-only.\nRestricts access permissions to read-only.\nRestricts access permissions to <code>A</code>.\nRestricts access permissions to <code>A</code>.\nUpdates the contained value using the given closure and …\nPerforms a volatile write, setting the contained value to …\nRestricts access permissions to write-only.\nRestricts access permissions to write-only.\nSealed trait that is implemented for the types in this …\nImplemented for access types that permit copying of …\nZero-sized marker type that grants no access.\nZero-sized marker type for allowing only read access.\nZero-sized marker type for allowing both read and write …\nHelper trait that is implemented by <code>ReadWrite</code> and <code>ReadOnly</code>.\nA trait for restricting one <code>Access</code> type to another <code>Access</code> …\nThe resulting <code>Access</code> type of <code>Self</code> restricted to <code>To</code>.\nHelper trait that is implemented by <code>ReadWrite</code> and <code>WriteOnly</code>…\nZero-sized marker type for allowing only write access.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")